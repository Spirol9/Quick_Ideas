package me.deveon.quick_ideas.wheel_of_prizes.wheel;import java.util.ArrayList;import java.util.Collections;import java.util.UUID;import java.util.logging.Level;import me.deveon.quick_ideas.main.Main;import me.deveon.quick_ideas.main.utils.Messages_Templates;import org.bukkit.Bukkit;import org.bukkit.Material;import org.bukkit.Sound;import org.bukkit.entity.Player;import org.bukkit.event.EventHandler;import org.bukkit.event.Listener;import org.bukkit.event.block.BlockPlaceEvent;import org.bukkit.event.inventory.InventoryClickEvent;import org.bukkit.event.inventory.InventoryEvent;import org.bukkit.event.player.PlayerDropItemEvent;import org.bukkit.event.player.PlayerPickupItemEvent;import org.bukkit.event.player.PlayerSwapHandItemsEvent;import org.bukkit.inventory.ItemStack;import org.bukkit.plugin.Plugin;import org.bukkit.scheduler.BukkitRunnable;public class onSpin implements Listener {  private static UUID participant;  private static ArrayList<Material> glassBlocks;  private static boolean started;  private static boolean inChallenge;  private boolean forcedStop;  private int slowdown;  private Main instance;  public onSpin(Main main) {    instance = main;    glassBlocks = new ArrayList<Material>();    started = false;    inChallenge = false;    forcedStop = false;    slowdown = 0;    addBlocks();  }  public static UUID getParticipant() {    return participant;  }  public static void setParticipant(UUID participant) {    onSpin.participant = participant;  }  public static ArrayList<Material> getGlassBlocks() {    return glassBlocks;  }  public static boolean isStarted() {    return started;  }  public static boolean isInChallenge() {    return inChallenge;  }  public static void setInChallengeChallenge(boolean state) {    onSpin.inChallenge = state;  }  public boolean stopAll() {    if (participant != null) {      Bukkit.getPlayer(participant).getInventory().clear();      participant = null;      started = false;      inChallenge = false;      forcedStop = true;      Messages_Templates.consoleMessageWarpper(Collections.singletonList("Stopped All!"), Level.SEVERE);      new BukkitRunnable() {        @Override        public void run() {          forcedStop = false;        }      }.runTaskLater(instance, 20L);      return true;    }    return false;  }  private void addBlocks() {    glassBlocks.add(Material.RED_STAINED_GLASS);    glassBlocks.add(Material.LIME_STAINED_GLASS);    glassBlocks.add(Material.BLUE_STAINED_GLASS);    glassBlocks.add(Material.YELLOW_STAINED_GLASS);    glassBlocks.add(Material.ORANGE_STAINED_GLASS);    glassBlocks.add(Material.PURPLE_STAINED_GLASS);    glassBlocks.add(Material.PINK_STAINED_GLASS);    glassBlocks.add(Material.CYAN_STAINED_GLASS);    glassBlocks.add(Material.GRAY_STAINED_GLASS);  }  private void startWheelRot(Player p) {    started = true;    Collections.shuffle(onSpin.glassBlocks);    for (int i = 0; i < 9; i++) {      p.getInventory().setItem(i, new ItemStack(glassBlocks.get(i)));    }    new BukkitRunnable() {      int counter = 8;      int pitchCounter = 1;      int setSpinAmount = 81;      final int spinAmount = setSpinAmount;      ItemStack tempItemHolder;      @Override      public void run() {        if (!forcedStop) {          if (setSpinAmount == 0) {            this.cancel();            //move on to pick challange          }          new BukkitRunnable() {            @Override            public void run() {              tempItemHolder = p.getInventory().getItem(8);              ItemStack pushForward = p.getInventory().getItem(counter);              if (counter < 8) {                p.getInventory().setItem(counter + 1, pushForward);                if (counter == 0) {                  p.getInventory().setItem(0, tempItemHolder);                }                playWheelSounds(p, pitchCounter);                p.updateInventory();              }              setSpinAmount--;              counter--;              pitchCounter++;              if (counter < 0) {                counter = 8;              }              if (pitchCounter == 3) {                pitchCounter = 1;              }              if (setSpinAmount == 0) {                this.cancel();                new BukkitRunnable() {                  int s = 0;                  int f = 9;                  @Override                  public void run() {                    p.getInventory().setItem(s, new ItemStack(Material.WHITE_WOOL));                    p.getInventory().setItem(f, new ItemStack(Material.WHITE_WOOL));                    p.updateInventory();                    playWheelSounds(p, pitchCounter);                    if(s < 3){                      s++;                    }                    if(f > 4){                      f--;                    }                    if (f == 4){                      this.cancel();                      playWheelSounds(p, 1);                      new BukkitRunnable() {                        @Override                        public void run() {                          p.getInventory().clear();                          setInChallengeChallenge(true);                        }                      }.runTaskLater(instance, 20 * 4);                    }                  }                }.runTaskTimer(instance, 60, 5);              }            }          }.runTaskLater(instance, slowdown);          if (setSpinAmount < spinAmount / 4) {            slowdown = slowdown + 1;          }        } else {          this.cancel();        }      }    }.runTaskTimer(instance, 0L, 0);  }  public void startSlotLock(Player p) {    new BukkitRunnable() {      @Override      public void run() {        if (participant == p.getUniqueId() & !inChallenge) {          p.getInventory().setHeldItemSlot(4);        } else {          this.cancel();        }      }    }.runTaskTimer((Plugin) instance, 0, 0);  }  private boolean isWheelItem(Player p) {    for (Material mat : glassBlocks) {      if (p.getItemOnCursor().getType() == mat || p.getInventory().getItemInMainHand().getType() == mat) {        return true;      }    }    return false;  }  private void playWheelSounds(Player p, int counter) {    float pitch = 1.0f;    if (counter == 1) {      pitch = 2;    } else if (counter == 2) {      pitch = 1.334840f;    } else if (counter == 3) {      pitch = 0.5f;    }    p.getWorld().playSound(p.getLocation(), Sound.BLOCK_NOTE_BLOCK_PLING, 1f, pitch);  }  @EventHandler  public void onInventoryInteraction(InventoryClickEvent e) {    Player p = (Player) e.getWhoClicked();    if (e.getWhoClicked().getUniqueId() == participant & !inChallenge) {      try {        if (e.getCursor().getType() == Material.LEVER || e.getCurrentItem().getType() == Material.LEVER) {          startWheelRot(p);        }      } catch (NullPointerException ignored) {      }      e.setCancelled(true);      p.updateInventory();    }  }  @EventHandler  public void onInventoryInteraction(InventoryEvent e) {    Player p = (Player) e.getViewers();    if (p.getUniqueId() == participant & !inChallenge) {      p.getInventory().setHeldItemSlot(4);      p.updateInventory();    }  }  @EventHandler  public void onItemPlace(BlockPlaceEvent e) {    Player p = (Player) e.getPlayer();    if (p.getUniqueId() == participant & !inChallenge) {      if (e.getBlockPlaced().getType() == Material.LEVER || glassBlocks.contains(e.getBlockPlaced().getType())) {        e.setCancelled(true);      }    }  }  @EventHandler  public void onItemDrop(PlayerDropItemEvent e) {    Player p = (Player) e.getPlayer();    if (p.getUniqueId() == participant & !inChallenge) {      if (e.getItemDrop().getItemStack().getType() == Material.LEVER || glassBlocks.contains(e.getItemDrop().getItemStack().getType())) {        e.setCancelled(true);      }    }  }  @EventHandler  public void onItemPickup(PlayerPickupItemEvent e) {    Player p = (Player) e.getPlayer();    if (p.getUniqueId() == participant & !inChallenge) {      if (e.getItem().getItemStack().getType() == Material.LEVER || glassBlocks.contains(e.getItem().getItemStack().getType())) {        e.setCancelled(true);      }    }  }  @EventHandler  public void onPlayerSwapHands(PlayerSwapHandItemsEvent e) {    Player p = (Player) e.getPlayer();    if (p.getUniqueId() == participant & !inChallenge) {      e.setCancelled(true);    }  }}