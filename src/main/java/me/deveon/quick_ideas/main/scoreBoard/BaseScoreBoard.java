package me.deveon.quick_ideas.main.scoreBoard;import java.util.ArrayList;import java.util.Arrays;import java.util.NoSuchElementException;import java.util.UUID;import java.util.logging.Level;import me.deveon.quick_ideas.main.Main;import me.deveon.quick_ideas.main.utils.Math_Utils;import me.deveon.quick_ideas.main.utils.Messages_Templates;import org.bukkit.Bukkit;import org.bukkit.ChatColor;import org.bukkit.scheduler.BukkitRunnable;import org.bukkit.scoreboard.DisplaySlot;import org.bukkit.scoreboard.Objective;import org.bukkit.scoreboard.Score;import org.bukkit.scoreboard.Scoreboard;import org.bukkit.scoreboard.Team;public class BaseScoreBoard {  private static Main instance;  private static int timer;  private static boolean forceStop;  private static boolean forceTimerStop;  private static BukkitRunnable TimerInstance;  private static Objective obj;  private static Scoreboard scoreBoard;  private static ArrayList<UUID> scoreBoardViewers;  private static boolean timerPaused;  public BaseScoreBoard(Main main) {    instance = main;    timer = -1;    forceStop = false;    forceTimerStop = true;    scoreBoard = registerScoreBoard();    scoreBoardViewers = new ArrayList<>();    timerPaused = false;  }  private static Scoreboard registerScoreBoard() {    if (forceStop) {      forceStop = false;    }    Scoreboard board = Bukkit.getScoreboardManager().getNewScoreboard();    obj = board.registerNewObjective("ServerName", "dummy", "Test Server");    obj.setDisplayName(ChatColor.WHITE + "-" + ChatColor.RED + ChatColor.BOLD + " DeVeon " + ChatColor.WHITE + "-");    obj.setDisplaySlot(DisplaySlot.SIDEBAR);    Score onlineName = obj.getScore("" + ChatColor.GRAY + ChatColor.BOLD + "» Online");    onlineName.setScore(15);    Team onlineCounter = board.registerNewTeam("onlineCounter");    onlineCounter.addEntry(ChatColor.BLACK + "" + ChatColor.WHITE);    if (Bukkit.getOnlinePlayers().size() == 0) {      onlineCounter.setPrefix(ChatColor.WHITE + "0" + ChatColor.RED + "/" + ChatColor.WHITE + Bukkit.getMaxPlayers());    } else {      onlineCounter.setPrefix("" + ChatColor.WHITE + Bukkit.getOnlinePlayers().size() + ChatColor.RED + "/" + ChatColor.WHITE + Bukkit.getMaxPlayers());    }    /////////////////////////////////////////////////////////////////////////    obj.getScore(ChatColor.BLACK + "" + ChatColor.WHITE).setScore(14);    /////////////////////////////////////////////////////////////////////////    board.registerNewTeam("timeCounter");    return board;  }  public static void updateScoreBoard() {    Scoreboard board = getScoreBoard();    if (Bukkit.getOnlinePlayers().size() == 0) {      board.getTeam("onlineCounter").setPrefix(ChatColor.WHITE + "0" + ChatColor.RED + "/" + ChatColor.WHITE + Bukkit.getMaxPlayers());    } else {      board.getTeam("onlineCounter").setPrefix(ChatColor.WHITE + "" + Bukkit.getOnlinePlayers().size() + ChatColor.RED + "/" + ChatColor.WHITE + Bukkit.getMaxPlayers());    }    try {      String entryTimer = "timeCounter";      if (!forceTimerStop) {        if (!timerPaused) {          timer++;          board.getTeam(entryTimer).setPrefix(ChatColor.YELLOW + Math_Utils.formatTime(timer));        }      } else {        timer = -1;      }    } catch (NullPointerException | NoSuchElementException ignore) {    }  }  public static void toggleTimer(boolean toggle) {    Scoreboard board = getScoreBoard();    if (toggle) {      new BukkitRunnable() {        public void run() {          TimerInstance = this;          if (forceStop) {            this.cancel();          }          try {            updateScoreBoard();          } catch (NullPointerException ignore) {            this.cancel();          }        }      }.runTaskTimer(instance, 0, 20L);      /////////////////////////////////////////////////////////////////////////      obj.getScore(ChatColor.BLACK + "  " + ChatColor.WHITE).setScore(13);      /////////////////////////////////////////////////////////////////////////      //      Score money = obj.getScore("" + ChatColor.GRAY + ChatColor.BOLD + "» Time");      money.setScore(12);      Team moneyCounter = board.getTeam("timeCounter");      moneyCounter.addEntry(ChatColor.RED + "" + ChatColor.WHITE);      obj.getScore(ChatColor.RED + "" + ChatColor.WHITE).setScore(11);    } else {      reIntalizeScoreBoard();    }  }  public static Scoreboard getScoreBoard() {    return scoreBoard;  }  private void setScoreBoard(Scoreboard scoreBoard) {    BaseScoreBoard.scoreBoard = scoreBoard;  }  private static void reIntalizeScoreBoard() {    scoreBoard = registerScoreBoard();    scoreBoardViewers.forEach(u -> Bukkit.getPlayer(u).setScoreboard(scoreBoard));  }  public static ArrayList<UUID> getScoreBoardViewers() {    return scoreBoardViewers;  }  public static void addScoreBoardViewer(UUID player) {    if (!scoreBoardViewers.contains(player)) {      scoreBoardViewers.add(player);    } else {      Messages_Templates.consoleMessageWarpper(Arrays.asList("Player is already in ArrayList scoreBoardViewers"), Level.WARNING);    }  }  public static void removeScoreBoardViewer(UUID player) {    if (scoreBoardViewers.contains(player)) {      scoreBoardViewers.remove(player);    } else {      Messages_Templates.consoleMessageWarpper(Arrays.asList("Player is not in ArrayList scoreBoardViewers"), Level.WARNING);    }  }  public static int getTimer() {    return timer;  }  public static boolean isTimerPaused() {    return timerPaused;  }  public static void toggleTimerPause() {    timerPaused = !timerPaused;  }  public static void forceTimerStop(Boolean forceTimerStop) {    BaseScoreBoard.forceTimerStop = forceTimerStop;    timer = -1;    if (forceTimerStop) {      try {        TimerInstance.cancel();        timerPaused = false;      } catch (NullPointerException ignore) {      }    }  }}