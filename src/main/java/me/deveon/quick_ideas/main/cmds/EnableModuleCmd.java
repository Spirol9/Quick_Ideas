package me.deveon.quick_ideas.main.cmds;import com.google.common.collect.ImmutableMap;import java.util.Arrays;import java.util.HashMap;import java.util.Set;import me.deveon.quick_ideas.main.Main;import me.deveon.quick_ideas.main.utils.Messages_Templates;import me.deveon.quick_ideas.random_placed_block.main.RPBMain;import me.deveon.quick_ideas.shared_damage.main.SDMain;import me.deveon.quick_ideas.wheel_of_prizes.main.WOPMain;import org.bukkit.ChatColor;import org.bukkit.Sound;import org.bukkit.command.Command;import org.bukkit.command.CommandExecutor;import org.bukkit.command.CommandSender;import org.bukkit.command.ConsoleCommandSender;import org.bukkit.entity.Player;public class EnableModuleCmd implements CommandExecutor {  private final HashMap<String, String> help;  private static HashMap<String, Boolean> modules;  private ImmutableMap<String, CommandExecutor> commands;  private Main instance;  public EnableModuleCmd(Main main) {    instance = main;    this.commands = ImmutableMap.<String, CommandExecutor>builder()        //.put("list", new ListModulesSubCmd(plugin))        //.put("remove", new LockServerSubCommand(main))        .build();    this.help = new HashMap<>();    help.put("YT <Module>", "Start or stop a Module");    help.put("YT List", "Start or stop a Module");    modules = new HashMap<>();    modules.put("shared_damage", false);    modules.put("wheel_of_prizes", false);    modules.put("random_placed_block", false);  }  @Override  public boolean onCommand(CommandSender commandSender, Command command, String s, String[] strings) {    if ((commandSender instanceof ConsoleCommandSender)) {      commandSender.sendMessage("Command can only be executed by a player");      return false;    }    Player player = (Player) commandSender;    if ((!commandSender.hasPermission("deveon_w.sd.*"))) {      player.sendMessage("No perm");      return false;    }    if (strings.length != 0) {      String subCommand = strings[0];      CommandExecutor executor = this.commands.get(subCommand.toLowerCase());      if (subCommand.equalsIgnoreCase("sharedDamage") || subCommand.equalsIgnoreCase("sd")) {        String sd = "shared_damage";        if(!instance.getModules().containsKey(sd)){          instance.addModule(sd, Arrays.asList(new SDMain(instance)));          Messages_Templates.customMessage(player, "" + ChatColor.GREEN + ChatColor.BOLD + "Started Module: " + sd.toUpperCase(), "", ChatColor.BLACK,              ChatColor.WHITE);          player.playSound(player.getLocation(),Sound.BLOCK_NOTE_BLOCK_PLING, 1,1);        }else{          SDMain sdMainInstance = (SDMain) instance.getModules().get(sd).get(0);          sdMainInstance.disableListeners();          instance.removeModule(sd);          Messages_Templates.customMessage(player, "" + ChatColor.RED + ChatColor.BOLD + "Stopped Module: " + sd.toUpperCase(), "", ChatColor.BLACK,              ChatColor.WHITE);          player.playSound(player.getLocation(),Sound.BLOCK_NOTE_BLOCK_BASEDRUM, 1,1);        }        modules.replace(sd,updateModuleState(sd));        return true;      }else if (subCommand.equalsIgnoreCase("wheelOfPrizes") || subCommand.equalsIgnoreCase("wop")) {        String wop = "wheel_of_prizes";        if(!instance.getModules().containsKey(wop)){          instance.addModule(wop, Arrays.asList(new WOPMain(instance)));          Messages_Templates.customMessage(player, "" + ChatColor.GREEN + ChatColor.BOLD + "Started Module: " + wop.toUpperCase(), "", ChatColor.BLACK,              ChatColor.WHITE);          player.playSound(player.getLocation(),Sound.BLOCK_NOTE_BLOCK_PLING, 1,1);        }else{          WOPMain wopMainInstance = (WOPMain) instance.getModules().get(wop).get(0);          wopMainInstance.disableListeners();          instance.removeModule(wop);          Messages_Templates.customMessage(player, "" + ChatColor.RED + ChatColor.BOLD + "Stopped Module: " + wop.toUpperCase(), "", ChatColor.BLACK,              ChatColor.WHITE);          player.playSound(player.getLocation(),Sound.BLOCK_NOTE_BLOCK_BASEDRUM, 1,1);        }        modules.replace(wop,updateModuleState(wop));        return true;      }else if (subCommand.equalsIgnoreCase("randomPlacedBlock") || subCommand.equalsIgnoreCase("rpb")) {        String rpb = "random_placed_block";        if(!instance.getModules().containsKey(rpb)){          instance.addModule(rpb, Arrays.asList(new RPBMain(instance)));          Messages_Templates.customMessage(player, "" + ChatColor.GREEN + ChatColor.BOLD + "Started Module: " + rpb.toUpperCase(), "", ChatColor.BLACK,                  ChatColor.WHITE);          player.playSound(player.getLocation(),Sound.BLOCK_NOTE_BLOCK_PLING, 1,1);        }else{          RPBMain rpbMainInstance = (RPBMain) instance.getModules().get(rpb).get(0);          rpbMainInstance.disableListeners();          instance.removeModule(rpb);          Messages_Templates.customMessage(player, "" + ChatColor.RED + ChatColor.BOLD + "Stopped Module: " + rpb.toUpperCase(), "", ChatColor.BLACK,                  ChatColor.WHITE);          player.playSound(player.getLocation(),Sound.BLOCK_NOTE_BLOCK_BASEDRUM, 1,1);        }        modules.replace(rpb,updateModuleState(rpb));        return true;      }    }    Messages_Templates.helpCommand(player, ChatColor.WHITE, ChatColor.BLACK, this.help);    return false;  }  public boolean updateModuleState(String module){    return !modules.get(module);  }  public static Set<String> listModules(){    return modules.keySet();  }}